module.exports = {
  parser: 'babel-eslint',
  env: {
    browser: true,
    es6: true,
    node: true,
  },
  plugins: [
    'react',
    'flowtype',
  ],
  extends: ['eslint:recommended'],
  parserOptions: {
    sourceType: 'module',
    ecmaFeatures: {
      experimentalObjectRestSpread: true,
      jsx: true,
    },
  },
  rules: {
    // Core
    'indent': [2, 2],
    'no-console': [0],
    'linebreak-style': [2, 'unix'],
    'quotes': [2, 'single'],
    'semi': [2, 'always'],
    'no-unused-vars': [1, { vars: 'all', args: 'none' }],

    // React
    'react/no-multi-comp': [0],
    'react/prop-types': [2],
    'react/display-name': [2],
    'react/self-closing-comp': [0],
    'react/no-danger': [2],
    'react/no-set-state': [0],
    'react/no-is-mounted': [2],
    'react/no-deprecated': [2],
    'react/no-did-mount-set-state': [0],
    'react/no-did-update-set-state': [2],
    'react/no-render-return-value': [2],
    'react/react-in-jsx-scope': [2],
    'react/no-unknown-property': [2],
    'react/sort-prop-types': [2],
    'react/sort-comp': [1, {
      order: [
        'type-annotations',
        'static-methods',
        'lifecycle',
        'everything-else',
        'render'
      ],
    }],
    'react/no-direct-mutation-state': [2],
    'react/forbid-component-props': [2],
    'react/forbid-prop-types': [2],
    'react/prefer-es6-class': [2],
    'react/no-string-refs': [2],
    'react/prefer-stateless-function': [0],
    'react/require-render-return': [2],
    'react/require-optimization': [0],
    'react/no-find-dom-node': [2],
    'react/no-danger-with-children': [2],
    'react/style-prop-object': [2],
    'react/no-unused-prop-types': [2],
    'react/jsx-key': [2],
    'react/jsx-first-prop-new-line': [2],
    'react/jsx-no-target-blank': [2],
    'react/jsx-filename-extension': [0],
    'react/jsx-uses-react': [2],
    'react/jsx-wrap-multilines': [2],
    'react/jsx-no-comment-textnodes': [2],
    'react/jsx-uses-vars': [2],
    'react/jsx-handler-names': [2],
    'react/jsx-pascal-case': [2],
    'react/jsx-no-bind': [2],
    'react/jsx-no-undef': [2],
    'react/jsx-curly-spacing': [2],
    'react/jsx-equals-spacing': [2],
    'react/jsx-sort-props': [0],
    'react/jsx-boolean-value': [2],
    'react/jsx-no-duplicate-props': [2],
    'react/jsx-max-props-per-line': [0],
    'react/jsx-no-literals': [0],
    'react/jsx-indent-props': [2, 2],
    'react/jsx-indent': [2, 2],
    'react/jsx-closing-bracket-location': [2],
    'react/jsx-space-before-closing': [2],

    // Flow
    'flowtype/boolean-style': [2, 'boolean'],
    'flowtype/define-flow-type': [1],
    'flowtype/delimiter-dangle': [2, 'always-multiline'],
    'flowtype/generic-spacing': [2, 'never'],
    'flowtype/require-parameter-type': [2, { 'excludeArrowFunctions': 'expressionsOnly' }],
    'flowtype/require-valid-file-annotation': [2, 'always'],
    'flowtype/semi': [2, 'always'],
    'flowtype/space-after-type-colon': [2, 'always'],
    'flowtype/space-before-generic-bracket': [2, 'never'],
    'flowtype/space-before-type-colon': [2, 'never'],
    'flowtype/type-id-match': [2, '^([A-Z][a-zA-Z0-9$]+)$'], // Capitalize flow types
    'flowtype/union-intersection-spacing': [2, 'always'],
    'flowtype/use-flow-type': [1],
    'flowtype/valid-syntax': [1],
    'flowtype/require-return-type': [0], // Let flow handle this
    'flowtype/no-weak-types': [0], // This is nice in theory, but not good for rapid dev
  },
};
